/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentClassEnrollmentService } from "../studentClassEnrollment.service";
import { StudentClassEnrollmentCreateInput } from "./StudentClassEnrollmentCreateInput";
import { StudentClassEnrollment } from "./StudentClassEnrollment";
import { StudentClassEnrollmentFindManyArgs } from "./StudentClassEnrollmentFindManyArgs";
import { StudentClassEnrollmentWhereUniqueInput } from "./StudentClassEnrollmentWhereUniqueInput";
import { StudentClassEnrollmentUpdateInput } from "./StudentClassEnrollmentUpdateInput";

export class StudentClassEnrollmentControllerBase {
  constructor(protected readonly service: StudentClassEnrollmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentClassEnrollment })
  async createStudentClassEnrollment(
    @common.Body() data: StudentClassEnrollmentCreateInput
  ): Promise<StudentClassEnrollment> {
    return await this.service.createStudentClassEnrollment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentClassEnrollment] })
  @ApiNestedQuery(StudentClassEnrollmentFindManyArgs)
  async studentClassEnrollments(
    @common.Req() request: Request
  ): Promise<StudentClassEnrollment[]> {
    const args = plainToClass(
      StudentClassEnrollmentFindManyArgs,
      request.query
    );
    return this.service.studentClassEnrollments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentClassEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentClassEnrollment(
    @common.Param() params: StudentClassEnrollmentWhereUniqueInput
  ): Promise<StudentClassEnrollment | null> {
    const result = await this.service.studentClassEnrollment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentClassEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentClassEnrollment(
    @common.Param() params: StudentClassEnrollmentWhereUniqueInput,
    @common.Body() data: StudentClassEnrollmentUpdateInput
  ): Promise<StudentClassEnrollment | null> {
    try {
      return await this.service.updateStudentClassEnrollment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentClassEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentClassEnrollment(
    @common.Param() params: StudentClassEnrollmentWhereUniqueInput
  ): Promise<StudentClassEnrollment | null> {
    try {
      return await this.service.deleteStudentClassEnrollment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
