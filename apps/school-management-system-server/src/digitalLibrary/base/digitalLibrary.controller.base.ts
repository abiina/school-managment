/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DigitalLibraryService } from "../digitalLibrary.service";
import { DigitalLibraryCreateInput } from "./DigitalLibraryCreateInput";
import { DigitalLibrary } from "./DigitalLibrary";
import { DigitalLibraryFindManyArgs } from "./DigitalLibraryFindManyArgs";
import { DigitalLibraryWhereUniqueInput } from "./DigitalLibraryWhereUniqueInput";
import { DigitalLibraryUpdateInput } from "./DigitalLibraryUpdateInput";

export class DigitalLibraryControllerBase {
  constructor(protected readonly service: DigitalLibraryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DigitalLibrary })
  async createDigitalLibrary(
    @common.Body() data: DigitalLibraryCreateInput
  ): Promise<DigitalLibrary> {
    return await this.service.createDigitalLibrary({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DigitalLibrary] })
  @ApiNestedQuery(DigitalLibraryFindManyArgs)
  async digitalLibraries(
    @common.Req() request: Request
  ): Promise<DigitalLibrary[]> {
    const args = plainToClass(DigitalLibraryFindManyArgs, request.query);
    return this.service.digitalLibraries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DigitalLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async digitalLibrary(
    @common.Param() params: DigitalLibraryWhereUniqueInput
  ): Promise<DigitalLibrary | null> {
    const result = await this.service.digitalLibrary({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DigitalLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDigitalLibrary(
    @common.Param() params: DigitalLibraryWhereUniqueInput,
    @common.Body() data: DigitalLibraryUpdateInput
  ): Promise<DigitalLibrary | null> {
    try {
      return await this.service.updateDigitalLibrary({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DigitalLibrary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDigitalLibrary(
    @common.Param() params: DigitalLibraryWhereUniqueInput
  ): Promise<DigitalLibrary | null> {
    try {
      return await this.service.deleteDigitalLibrary({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
