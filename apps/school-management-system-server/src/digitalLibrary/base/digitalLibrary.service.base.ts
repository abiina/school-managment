/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DigitalLibrary as PrismaDigitalLibrary } from "@prisma/client";

export class DigitalLibraryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DigitalLibraryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.digitalLibrary.count(args);
  }

  async digitalLibraries(
    args: Prisma.DigitalLibraryFindManyArgs
  ): Promise<PrismaDigitalLibrary[]> {
    return this.prisma.digitalLibrary.findMany(args);
  }
  async digitalLibrary(
    args: Prisma.DigitalLibraryFindUniqueArgs
  ): Promise<PrismaDigitalLibrary | null> {
    return this.prisma.digitalLibrary.findUnique(args);
  }
  async createDigitalLibrary(
    args: Prisma.DigitalLibraryCreateArgs
  ): Promise<PrismaDigitalLibrary> {
    return this.prisma.digitalLibrary.create(args);
  }
  async updateDigitalLibrary(
    args: Prisma.DigitalLibraryUpdateArgs
  ): Promise<PrismaDigitalLibrary> {
    return this.prisma.digitalLibrary.update(args);
  }
  async deleteDigitalLibrary(
    args: Prisma.DigitalLibraryDeleteArgs
  ): Promise<PrismaDigitalLibrary> {
    return this.prisma.digitalLibrary.delete(args);
  }
}
