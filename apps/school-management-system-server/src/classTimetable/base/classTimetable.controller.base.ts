/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClassTimetableService } from "../classTimetable.service";
import { ClassTimetableCreateInput } from "./ClassTimetableCreateInput";
import { ClassTimetable } from "./ClassTimetable";
import { ClassTimetableFindManyArgs } from "./ClassTimetableFindManyArgs";
import { ClassTimetableWhereUniqueInput } from "./ClassTimetableWhereUniqueInput";
import { ClassTimetableUpdateInput } from "./ClassTimetableUpdateInput";

export class ClassTimetableControllerBase {
  constructor(protected readonly service: ClassTimetableService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClassTimetable })
  async createClassTimetable(
    @common.Body() data: ClassTimetableCreateInput
  ): Promise<ClassTimetable> {
    return await this.service.createClassTimetable({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClassTimetable] })
  @ApiNestedQuery(ClassTimetableFindManyArgs)
  async classTimetables(
    @common.Req() request: Request
  ): Promise<ClassTimetable[]> {
    const args = plainToClass(ClassTimetableFindManyArgs, request.query);
    return this.service.classTimetables({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClassTimetable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async classTimetable(
    @common.Param() params: ClassTimetableWhereUniqueInput
  ): Promise<ClassTimetable | null> {
    const result = await this.service.classTimetable({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClassTimetable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClassTimetable(
    @common.Param() params: ClassTimetableWhereUniqueInput,
    @common.Body() data: ClassTimetableUpdateInput
  ): Promise<ClassTimetable | null> {
    try {
      return await this.service.updateClassTimetable({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClassTimetable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClassTimetable(
    @common.Param() params: ClassTimetableWhereUniqueInput
  ): Promise<ClassTimetable | null> {
    try {
      return await this.service.deleteClassTimetable({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
