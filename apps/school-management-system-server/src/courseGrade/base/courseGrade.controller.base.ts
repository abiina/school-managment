/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourseGradeService } from "../courseGrade.service";
import { CourseGradeCreateInput } from "./CourseGradeCreateInput";
import { CourseGrade } from "./CourseGrade";
import { CourseGradeFindManyArgs } from "./CourseGradeFindManyArgs";
import { CourseGradeWhereUniqueInput } from "./CourseGradeWhereUniqueInput";
import { CourseGradeUpdateInput } from "./CourseGradeUpdateInput";

export class CourseGradeControllerBase {
  constructor(protected readonly service: CourseGradeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CourseGrade })
  async createCourseGrade(
    @common.Body() data: CourseGradeCreateInput
  ): Promise<CourseGrade> {
    return await this.service.createCourseGrade({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CourseGrade] })
  @ApiNestedQuery(CourseGradeFindManyArgs)
  async courseGrades(@common.Req() request: Request): Promise<CourseGrade[]> {
    const args = plainToClass(CourseGradeFindManyArgs, request.query);
    return this.service.courseGrades({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CourseGrade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courseGrade(
    @common.Param() params: CourseGradeWhereUniqueInput
  ): Promise<CourseGrade | null> {
    const result = await this.service.courseGrade({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CourseGrade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourseGrade(
    @common.Param() params: CourseGradeWhereUniqueInput,
    @common.Body() data: CourseGradeUpdateInput
  ): Promise<CourseGrade | null> {
    try {
      return await this.service.updateCourseGrade({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CourseGrade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourseGrade(
    @common.Param() params: CourseGradeWhereUniqueInput
  ): Promise<CourseGrade | null> {
    try {
      return await this.service.deleteCourseGrade({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
