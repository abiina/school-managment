/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CourseGrade as PrismaCourseGrade } from "@prisma/client";

export class CourseGradeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CourseGradeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.courseGrade.count(args);
  }

  async courseGrades(
    args: Prisma.CourseGradeFindManyArgs
  ): Promise<PrismaCourseGrade[]> {
    return this.prisma.courseGrade.findMany(args);
  }
  async courseGrade(
    args: Prisma.CourseGradeFindUniqueArgs
  ): Promise<PrismaCourseGrade | null> {
    return this.prisma.courseGrade.findUnique(args);
  }
  async createCourseGrade(
    args: Prisma.CourseGradeCreateArgs
  ): Promise<PrismaCourseGrade> {
    return this.prisma.courseGrade.create(args);
  }
  async updateCourseGrade(
    args: Prisma.CourseGradeUpdateArgs
  ): Promise<PrismaCourseGrade> {
    return this.prisma.courseGrade.update(args);
  }
  async deleteCourseGrade(
    args: Prisma.CourseGradeDeleteArgs
  ): Promise<PrismaCourseGrade> {
    return this.prisma.courseGrade.delete(args);
  }
}
